# -*- coding: utf-8 -*-
"""One shot tiny_nerf_pytorch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/176nZljfbtj3hWft2Z4ryEfnBwsTfhxzN

## Tiny NeRF (A PyTorch implementation)

So, this weekend, I was catching up on this _cool paper_ titled [*NeRF: Representing scenes as neural radiance fields for view synthesis*](https://arxiv.org/abs/2003.08934)!

The authors released a TensorFlow implementation [here](https://github.com/bmild/nerf). Deciding to delve deeper, I ported their code to PyTorch, cause why not!

> *DISCLAIMER*: This notebook (and repository) is work-in-progress. Although I have rigorously tested most modules in here (to faithfully replicate the original implementation), my implementation at places deviates from the authors'. Comments/criticism welcome!

> All functions that have a `#TESTED` under the docstring imply that they have been tested against their corresponding tensorflow impls.
"""

import os

gpu_n = '0'
os.environ['CUDA_VISIBLE_DEVICES'] = gpu_n  # args.gpu_no
if not os.path.exists('ToyResults'):
    os.makedirs('ToyResults')

# Import all the good stuff
from typing import Optional

import numpy as np
import torch
import matplotlib.pyplot as plt
from loss_functions import perceptual_loss, vgg


"""## A few utility functions

#### Bridging PyTorch and TensorFlow functionality

There's plenty of differences in function signatures (and in functionality) b/w PyTorch and TensorFlow. Here's a few modules that help bridge the gap (for this particular impl).
"""


def meshgrid_xy(tensor1: torch.Tensor, tensor2: torch.Tensor) -> (torch.Tensor, torch.Tensor):
    """Mimick np.meshgrid(..., indexing="xy") in pytorch. torch.meshgrid only allows "ij" indexing.
    (If you're unsure what this means, safely skip trying to understand this, and run a tiny example!)

    Args:
      tensor1 (torch.Tensor): Tensor whose elements define the first dimension of the returned meshgrid.
      tensor2 (torch.Tensor): Tensor whose elements define the second dimension of the returned meshgrid.
    """
    # TESTED
    ii, jj = torch.meshgrid(tensor1, tensor2)
    return ii.transpose(-1, -2), jj.transpose(-1, -2)


def cumprod_exclusive(tensor: torch.Tensor) -> torch.Tensor:
    r"""Mimick functionality of tf.math.cumprod(..., exclusive=True), as it isn't available in PyTorch.

  Args:
    tensor (torch.Tensor): Tensor whose cumprod (cumulative product, see `torch.cumprod`) along dim=-1
      is to be computed.

  Returns:
    cumprod (torch.Tensor): cumprod of Tensor along dim=-1, mimiciking the functionality of
      tf.math.cumprod(..., exclusive=True) (see `tf.math.cumprod` for details).
  """
    # TESTED
    # Only works for the last dimension (dim=-1)
    dim = -1
    # Compute regular cumprod first (this is equivalent to `tf.math.cumprod(..., exclusive=False)`).
    cumprod = torch.cumprod(tensor, dim)
    # "Roll" the elements along dimension 'dim' by 1 element.
    cumprod = torch.roll(cumprod, 1, dim)
    # Replace the first element by "1" as this is what tf.cumprod(..., exclusive=True) does.
    cumprod[..., 0] = 1.

    return cumprod


"""#### Compute the "bundle" of rays through all pixels of an image."""


def get_ray_bundle(height: int, width: int, focal_length: float, tform_cam2world: torch.Tensor):
    r"""Compute the bundle of rays passing through all pixels of an image (one ray per pixel).

  Args:
    height (int): Height of an image (number of pixels).
    width (int): Width of an image (number of pixels).
    focal_length (float or torch.Tensor): Focal length (number of pixels, i.e., calibrated intrinsics).
    tform_cam2world (torch.Tensor): A 6-DoF rigid-body transform (shape: :math:`(4, 4)`) that
      transforms a 3D point from the camera frame to the "world" frame for the current example.

  Returns:
    ray_origins (torch.Tensor): A tensor of shape :math:`(width, height, 3)` denoting the centers of
      each ray. `ray_origins[i][j]` denotes the origin of the ray passing through pixel at
      row index `j` and column index `i`.
      (TODO: double check if explanation of row and col indices convention is right).
    ray_directions (torch.Tensor): A tensor of shape :math:`(width, height, 3)` denoting the
      direction of each ray (a unit vector). `ray_directions[i][j]` denotes the direction of the ray
      passing through the pixel at row index `j` and column index `i`.
      (TODO: double check if explanation of row and col indices convention is right).
  """
    # TESTED
    ii, jj = meshgrid_xy(
        torch.arange(width).to(tform_cam2world),
        torch.arange(height).to(tform_cam2world)
    )
    directions = torch.stack([(ii - width * .5) / focal_length,
                              -(jj - height * .5) / focal_length,
                              -torch.ones_like(ii)
                              ], dim=-1)
    ray_directions = torch.sum(directions[..., None, :] * tform_cam2world[:3, :3], dim=-1)
    ray_origins = tform_cam2world[:3, -1].expand(ray_directions.shape)
    return ray_origins, ray_directions


"""#### Compute "query" 3D points given the "bundle" of rays.

We assume that a _near_ and a _far_ clipping distance are provided that delineate the volume of interest. Each ray is evaluated only within these bounds. We randomly sample points along each ray, while trying to ensure most parts of the ray's trajectory are spanned.
"""


def compute_query_points_from_rays(
        ray_origins: torch.Tensor,
        ray_directions: torch.Tensor,
        near_thresh: float,
        far_thresh: float,
        num_samples: int,
        min_max_rays,
        randomize: Optional[bool] = True
) -> (torch.Tensor, torch.Tensor):
    r"""Compute query 3D points given the "bundle" of rays. The near_thresh and far_thresh
  variables indicate the bounds within which 3D points are to be sampled.

  Args:
    ray_origins (torch.Tensor): Origin of each ray in the "bundle" as returned by the
      `get_ray_bundle()` method (shape: :math:`(width, height, 3)`).
    ray_directions (torch.Tensor): Direction of each ray in the "bundle" as returned by the
      `get_ray_bundle()` method (shape: :math:`(width, height, 3)`).
    near_thresh (float): The 'near' extent of the bounding volume (i.e., the nearest depth
      coordinate that is of interest/relevance).
    far_thresh (float): The 'far' extent of the bounding volume (i.e., the farthest depth
      coordinate that is of interest/relevance).
    num_samples (int): Number of samples to be drawn along each ray. Samples are drawn
      randomly, whilst trying to ensure "some form of" uniform spacing among them.
    randomize (optional, bool): Whether or not to randomize the sampling of query points.
      By default, this is set to `True`. If disabled (by setting to `False`), we sample
      uniformly spaced points along each ray in the "bundle".

  Returns:
    query_points (torch.Tensor): Query points along each ray
      (shape: :math:`(width, height, num_samples, 3)`).
    depth_values (torch.Tensor): Sampled depth values along each ray
      (shape: :math:`(num_samples)`).
  """

    min_rays = torch.sigmoid(min_max_rays[:, :, 0, None]) * (far_thresh - near_thresh) + near_thresh
    max_rays = torch.sigmoid(min_max_rays[:, :, 1, None]) * (far_thresh + 1e-6 - min_rays) + min_rays
    depth_values = torch.linspace(0, 1, steps=num_samples).view(1, 1, -1).type_as(ray_origins)
    depth_values = depth_values * (max_rays - min_rays) + min_rays

    if randomize is True:
        noise_shape = list(ray_origins.shape[:-1]) + [num_samples]
        depth_values = depth_values \
                       + torch.rand(noise_shape).to(ray_origins) * (max_rays.detach() - min_rays.detach()) / num_samples
    query_points = ray_origins[..., None, :] + ray_directions[..., None, :] * depth_values[..., :, None]
    return query_points, depth_values, min_rays, max_rays


# @title
def compute_constant_query_points_from_rays(
        ray_origins: torch.Tensor,
        ray_directions: torch.Tensor,
        near_thresh: float,
        far_thresh: float,
        num_samples: int,
        randomize: Optional[bool] = True
) -> (torch.Tensor, torch.Tensor):
    r"""Compute query 3D points given the "bundle" of rays. The near_thresh and far_thresh
  variables indicate the bounds within which 3D points are to be sampled.

  Args:
    ray_origins (torch.Tensor): Origin of each ray in the "bundle" as returned by the
      `get_ray_bundle()` method (shape: :math:`(width, height, 3)`).
    ray_directions (torch.Tensor): Direction of each ray in the "bundle" as returned by the
      `get_ray_bundle()` method (shape: :math:`(width, height, 3)`).
    near_thresh (float): The 'near' extent of the bounding volume (i.e., the nearest depth
      coordinate that is of interest/relevance).
    far_thresh (float): The 'far' extent of the bounding volume (i.e., the farthest depth
      coordinate that is of interest/relevance).
    num_samples (int): Number of samples to be drawn along each ray. Samples are drawn
      randomly, whilst trying to ensure "some form of" uniform spacing among them.
    randomize (optional, bool): Whether or not to randomize the sampling of query points.
      By default, this is set to `True`. If disabled (by setting to `False`), we sample
      uniformly spaced points along each ray in the "bundle".

  Returns:
    query_points (torch.Tensor): Query points along each ray
      (shape: :math:`(width, height, num_samples, 3)`).
    depth_values (torch.Tensor): Sampled depth values along each ray
      (shape: :math:`(num_samples)`).
  """
    # TESTED
    # shape: (num_samples)
    depth_values = torch.linspace(near_thresh, far_thresh, num_samples).to(ray_origins)
    if randomize is True:
        # ray_origins: (width, height, 3)
        # noise_shape = (width, height, num_samples)
        noise_shape = list(ray_origins.shape[:-1]) + [num_samples]
        # depth_values: (num_samples)
        depth_values = depth_values \
                       + torch.rand(noise_shape).to(ray_origins) * (far_thresh
                                                                    - near_thresh) / num_samples
    # (width, height, num_samples, 3) = (width, height, 1, 3) + (width, height, 1, 3) * (num_samples, 1)
    # query_points:  (width, height, num_samples, 3)
    query_points = ray_origins[..., None, :] + ray_directions[..., None, :] * depth_values[..., :, None]
    # TODO: Double-check that `depth_values` returned is of shape `(num_samples)`.
    return query_points, depth_values


class one_shot_nerf(torch.nn.Module):
    def __init__(self, num_samples=64, filter_size=128):
        super(one_shot_nerf, self).__init__()
        # Input layer (default: 39 -> 128)
        self.layer1 = torch.nn.Conv2d(num_samples * 3, filter_size, kernel_size=1)
        self.layer2 = torch.nn.Conv2d(filter_size, filter_size, kernel_size=1)
        self.layer2a = torch.nn.Conv2d(filter_size, filter_size, kernel_size=1)
        # self.layer2b = torch.nn.Conv2d(filter_size, filter_size, kernel_size=1)
        # self.layer2c = torch.nn.Conv2d(filter_size, filter_size, kernel_size=1)
        self.layer3 = torch.nn.Conv2d(filter_size, num_samples * 4 + 2, kernel_size=1)
        self.relu = torch.nn.functional.relu
        self.sine = torch.sin

    def forward(self, x):
        x = self.sine(self.layer1(x/6-3))
        x = self.sine(self.layer2(x))
        x = self.sine(self.layer2a(x))
        # x = self.relu(self.layer2b(x))
        # x = self.relu(self.layer2c(x))
        x = self.layer3(x)
        return x


"""#### Volumetric rendering

> **NOTE**: This volumetric rendering module (like the authors' tiny_nerf [Colab notebook](https://colab.research.google.com/github/bmild/nerf/blob/master/tiny_nerf.ipynb) does not implement 5D input (which includes view directions, in addition to X, Y, Z coordinates). It also does not implement the hierarchical sampling procedure. For those implementations, refer to the other complete examples in the repo.
"""


def render_volume_density(
        radiance_field: torch.Tensor,
        ray_origins: torch.Tensor,
        depth_values: torch.Tensor
) -> (torch.Tensor, torch.Tensor, torch.Tensor):
    r"""Differentiably renders a radiance field, given the origin of each ray in the
  "bundle", and the sampled depth values along them.

  Args:
    radiance_field (torch.Tensor): A "field" where, at each query location (X, Y, Z),
      we have an emitted (RGB) color and a volume density (denoted :math:`\sigma` in
      the paper) (shape: :math:`(width, height, num_samples, 4)`).
    ray_origins (torch.Tensor): Origin of each ray in the "bundle" as returned by the
      `get_ray_bundle()` method (shape: :math:`(width, height, 3)`).
    depth_values (torch.Tensor): Sampled depth values along each ray
      (shape: :math:`(num_samples)`).

  Returns:
    rgb_map (torch.Tensor): Rendered RGB image (shape: :math:`(width, height, 3)`).
    depth_map (torch.Tensor): Rendered depth image (shape: :math:`(width, height)`).
    acc_map (torch.Tensor): # TODO: Double-check (I think this is the accumulated
      transmittance map).
  """
    # TESTED
    sigma_a = torch.nn.functional.relu(radiance_field[..., 3])
    rgb = torch.sigmoid(radiance_field[..., :3])
    one_e_10 = torch.tensor([1e10], dtype=ray_origins.dtype, device=ray_origins.device)
    dists = torch.cat((depth_values[..., 1:] - depth_values[..., :-1],
                       one_e_10.expand(depth_values[..., :1].shape)), dim=-1)
    alpha = 1. - torch.exp(-sigma_a * dists)
    weights = alpha * cumprod_exclusive(1. - alpha + 1e-10)

    rgb_map = (weights[..., None] * rgb).sum(dim=-2)
    depth_map = (weights * depth_values).sum(dim=-1)
    acc_map = weights.sum(-1)

    return rgb_map, depth_map, acc_map


"""#### Positional encoding

Another interesting tweak used in NeRF is "positional encoding", which postulates the use of a mapping to higher dimensional space (using a basis set of high-frequency functions). This greatly enhances the model's capability to capture high-frequency variations.
"""


def positional_encoding(
        tensor, num_encoding_functions=6, include_input=True, log_sampling=True
) -> torch.Tensor:
    r"""Apply positional encoding to the input.

  Args:
    tensor (torch.Tensor): Input tensor to be positionally encoded.
    num_encoding_functions (optional, int): Number of encoding functions used to
        compute a positional encoding (default: 6).
    include_input (optional, bool): Whether or not to include the input in the
        computed positional encoding (default: True).
    log_sampling (optional, bool): Sample logarithmically in frequency space, as
        opposed to linearly (default: True).

  Returns:
    (torch.Tensor): Positional encoding of the input tensor.
  """
    # TESTED
    # Trivially, the input tensor is added to the positional encoding.
    encoding = [tensor] if include_input else []
    # Now, encode the input using a set of high-frequency functions and append the
    # resulting values to the encoding.
    frequency_bands = None
    if log_sampling:
        frequency_bands = 2.0 ** torch.linspace(
            0.0,
            num_encoding_functions - 1,
            num_encoding_functions,
            dtype=tensor.dtype,
            device=tensor.device,
        )
    else:
        frequency_bands = torch.linspace(
            2.0 ** 0.0,
            2.0 ** (num_encoding_functions - 1),
            num_encoding_functions,
            dtype=tensor.dtype,
            device=tensor.device,
        )

    for freq in frequency_bands:
        for func in [torch.sin, torch.cos]:
            encoding.append(func(tensor * freq))

    # Special case, for no positional encoding
    if len(encoding) == 1:
        return encoding[0]
    else:
        return torch.cat(encoding, dim=-1)

"""## TinyNeRF: Network architecture"""
class VeryTinyNerfModel(torch.nn.Module):
    r"""Define a "very tiny" NeRF model comprising three fully connected layers.
  """

    def __init__(self, filter_size=128, num_encoding_functions=6):
        super(VeryTinyNerfModel, self).__init__()
        # Input layer (default: 39 -> 128)
        self.layer1 = torch.nn.Linear(3 + 3 * 2 * num_encoding_functions, filter_size)
        # Layer 2 (default: 128 -> 128)
        self.layer2 = torch.nn.Linear(filter_size, filter_size)
        # Layer 3 (default: 128 -> 4)
        self.layer3 = torch.nn.Linear(filter_size, 4)
        # Short hand for torch.nn.functional.relu
        self.relu = torch.nn.functional.relu

    def forward(self, x):
        x = self.relu(self.layer1(x))
        x = self.relu(self.layer2(x))
        x = self.layer3(x)
        return x


"""## Dataloading utils"""
def get_minibatches(inputs: torch.Tensor, chunksize: Optional[int] = 1024 * 8):
    r"""Takes a huge tensor (ray "bundle") and splits it into a list of minibatches.
  Each element of the list (except possibly the last) has dimension `0` of length
  `chunksize`.
  """
    return [inputs[i:i + chunksize] for i in range(0, inputs.shape[0], chunksize)]


"""## Get data"""

"""## Determine device to run on (GPU vs CPU)"""

print(f'using {"cuda" if torch.cuda.is_available() else "cpu"} device')
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

"""## Load up input images, poses, intrinsics, etc."""

# Load input images, poses, and intrinsics
data = np.load("tiny_nerf_data.npz")

# Images
images = data["images"]
# Camera extrinsics (poses)
tform_cam2world = data["poses"]
tform_cam2world = torch.from_numpy(tform_cam2world).to(device)
# Focal length (intrinsics)
focal_length = data["focal"]
focal_length = torch.from_numpy(focal_length).to(device)

# Height and width of each image
height, width = images.shape[1:3]

# Near and far clipping thresholds for depth values.
near_thresh = 1.
far_thresh = 7.

# Hold one image out (for test).
testimg, testpose = images[101], tform_cam2world[101]
testimg = torch.from_numpy(testimg).to(device)

# Map images to device
images = torch.from_numpy(images[:100, ..., :3]).to(device)

"""#### Display the image used for testing"""

plt.imshow(testimg.detach().cpu().numpy())
plt.savefig('ToyResults/GT.png')

"""## Train TinyNeRF!

(The cool part!)
"""


# One iteration of TinyNeRF (forward pass).
def run_one_iter_of_tinynerf(height, width, focal_length, tform_cam2world,
                             near_thresh, far_thresh, depth_samples_per_ray,
                             encoding_function, get_minibatches_function):
    # Get the "bundle" of rays through all image pixels.
    ray_origins, ray_directions = get_ray_bundle(height, width, focal_length,
                                                 tform_cam2world)

    # Sample query points along each ray
    query_points, depth_values = compute_constant_query_points_from_rays(
        ray_origins, ray_directions, near_thresh, far_thresh, depth_samples_per_ray, True
    )

    mm_input = query_points.view(ray_origins.shape[0], ray_origins.shape[1], depth_samples_per_ray * ray_origins.shape[2])
    mm_input = torch.transpose(mm_input.unsqueeze(0), 1, 3)  # (1, 3 * depth_samples_per_ray, height, width)
    min_max_rays = one_model(mm_input)
    predictions = torch.transpose(min_max_rays.squeeze(0), 0, 2)  # (width, height, 4*depth_samples_per_ray + 2)
    radiance_field_flattened = predictions[:, :, 0:4*depth_samples_per_ray].reshape(-1, 4)

    # "Unflatten" to obtain the radiance field.
    unflattened_shape = list(query_points.shape[:-1]) + [4]
    radiance_field = torch.reshape(radiance_field_flattened, unflattened_shape)

    # Perform differentiable volume rendering to re-synthesize the RGB image.
    rgb_predicted, depth_map, _ = render_volume_density(radiance_field, ray_origins, depth_values)

    ############################ Run nerf for depths ###################################
    min_max_values = predictions[:, :, 4 * depth_samples_per_ray::]
    query_points, depth_values, min_rays, max_rays = compute_query_points_from_rays(
        ray_origins, ray_directions, near_thresh, far_thresh, 8, min_max_values, False
    )

    # "Flatten" the query points.
    flattened_query_points = query_points.reshape((-1, 3))

    # Encode the query points (default: positional encoding).
    encoded_points = encoding_function(flattened_query_points)

    # Split the encoded points into "chunks", run the model on all chunks, and
    # concatenate the results (to avoid out-of-memory issues).
    batches = get_minibatches_function(encoded_points, chunksize=chunksize)
    predictions = []
    for batch in batches:
        predictions.append(model(batch))
    radiance_field_flattened = torch.cat(predictions, dim=0)

    # "Unflatten" to obtain the radiance field.
    unflattened_shape = list(query_points.shape[:-1]) + [4]
    radiance_field = torch.reshape(radiance_field_flattened, unflattened_shape)

    # Perform differentiable volume rendering to re-synthesize the RGB image.
    rgb_nerf, depth_nerf, _ = render_volume_density(radiance_field, ray_origins, depth_values)

    ########### Run one shot nerf on new range ######################
    # query_points, depth_values, min_rays, max_rays = compute_query_points_from_rays(
    #     ray_origins, ray_directions, near_thresh, far_thresh, depth_samples_per_ray, min_max_values, True
    # )
    # mm_input = query_points.view(ray_origins.shape[0], ray_origins.shape[1], depth_samples_per_ray * ray_origins.shape[2])
    # mm_input = torch.transpose(mm_input.unsqueeze(0), 1, 3)  # (1, 3 * depth_samples_per_ray, height, width)
    # min_max_rays = one_model(mm_input)
    # predictions = torch.transpose(min_max_rays.squeeze(0), 0, 2)  # (width, height, 4*depth_samples_per_ray + 2)
    # radiance_field_flattened = predictions[:, :, 0:4*depth_samples_per_ray].reshape(-1, 4)
    #
    # # "Unflatten" to obtain the radiance field.
    # unflattened_shape = list(query_points.shape[:-1]) + [4]
    # radiance_field = torch.reshape(radiance_field_flattened, unflattened_shape)
    #
    # # Perform differentiable volume rendering to re-synthesize the RGB image.
    # rgb_predicted_2, depth_map_2, _ = render_volume_density(radiance_field, ray_origins, depth_values)

    return rgb_predicted, rgb_nerf, rgb_predicted, depth_map, depth_nerf, depth_map


def log_stuff(rgb_predicted, rgb_nerf, rgb_predicted2, depth_map, depth_map_nerf, depth_map2,
              i, iternums, psnrs=None, train_losses=None):
    plt.figure(figsize=(5*7, 5))
    plt.subplot(171)
    plt.imshow(rgb_predicted.detach().cpu().numpy())
    plt.title(f"Iteration {i}")

    if psnrs is not None:
        plt.subplot(172)
        plt.plot(iternums, psnrs)
        plt.title("Val PSNR")
    elif train_losses is not None:
        plt.subplot(172)
        plt.plot(iternums, train_losses)
        plt.title("Train Loss")

    plt.subplot(173)
    plt.imshow(rgb_nerf.detach().cpu().numpy())
    plt.title(f"RGB nerf {i}")

    plt.subplot(174)
    plt.imshow(rgb_predicted2.detach().cpu().numpy())
    plt.title(f"RGB 2 {i}")

    plt.subplot(175)
    plt.imshow(depth_map.squeeze().detach().cpu().numpy())
    plt.title(f"Depth")

    plt.subplot(176)
    plt.imshow(depth_map_nerf.squeeze().detach().cpu().numpy())
    plt.title(f"Depth Nerf")

    plt.subplot(177)
    plt.imshow(depth_map2.squeeze().detach().cpu().numpy())
    plt.title(f"Depth 2")

    if psnrs is not None:
        plt.savefig('ToyResults/val_oneshot.png')
    elif train_losses is not None:
        plt.savefig('ToyResults/train_oneshot.png')


def disp_to_coords_n(depth, grid, h=0, w=0):
    # b, c, h, w = disp.shape

    # Set camera parameters
    # Any focal length and baseline is assumed, this should not change the geometry of the surfaces.
    # Principal point is assumed to be at the center of the image
    focal = (w/2, h/2)
    cx = w / 2
    cy = h / 2
    baseline = 1

    # Get depth from disparity
    z = depth

    # De-normalize grid and get horizontal and vertical pixel coordinates
    # i_tetha = torch.zeros(b, 2, 3).cuda()
    # i_tetha[:, 0, 0] = 1
    # i_tetha[:, 1, 1] = 1
    # grid = F.affine_grid(i_tetha, [b, c, h, w], align_corners=True)
    d_grid = (grid + 1) / 2
    u = w * d_grid[:,0,:,:].unsqueeze(1)
    v = h * d_grid[:,1,:,:].unsqueeze(1)

    # Get X, Y world coordinates
    x = ((u - cx) / focal[0]) * z
    y = ((v - cy) / focal[1]) * z

    # cx = 320, u = 200, disp = 2, z = 160, x =-120 / 320 * 160 =-60
    # cx = 320, u = 202, disp = 2, z = 160, x =-118 / 320 * 160 =-59

    xyz = torch.cat([x, y, z], 1)

    return xyz


def coords_to_normals(coords):
    """Calculate surface normals using first order finite-differences.
    https://github.com/voyleg/perceptual-depth-sr/
    Parameters
    ----------
    coords : array_like
        Coordinates of the points (**, 3, h, w).
    Returns
    -------
    normals : torch.Tensor
        Surface normals (**, 3, h, w).
    """
    coords = torch.as_tensor(coords)
    if coords.ndim < 4:
        coords = coords[None]

    dxdu = coords[..., 0, :, 1:] - coords[..., 0, :, :-1]
    dydu = coords[..., 1, :, 1:] - coords[..., 1, :, :-1]
    dzdu = coords[..., 2, :, 1:] - coords[..., 2, :, :-1]
    dxdv = coords[..., 0, 1:, :] - coords[..., 0, :-1, :]
    dydv = coords[..., 1, 1:, :] - coords[..., 1, :-1, :]
    dzdv = coords[..., 2, 1:, :] - coords[..., 2, :-1, :]

    dxdu = torch.nn.functional.pad(dxdu, (0, 1),       mode='replicate')
    dydu = torch.nn.functional.pad(dydu, (0, 1),       mode='replicate')
    dzdu = torch.nn.functional.pad(dzdu, (0, 1),       mode='replicate')

    # pytorch cannot just do `dxdv = torch.nn.functional.pad(dxdv, (0, 0, 0, 1), mode='replicate')`, so
    dxdv = torch.cat([dxdv, dxdv[..., -1:, :]], dim=-2)
    dydv = torch.cat([dydv, dydv[..., -1:, :]], dim=-2)
    dzdv = torch.cat([dzdv, dzdv[..., -1:, :]], dim=-2)

    n_x = dydv * dzdu - dydu * dzdv
    n_y = dzdv * dxdu - dzdu * dxdv
    n_z = dxdv * dydu - dxdu * dydv

    n = torch.stack([n_x, n_y, n_z], dim=-3)
    n = torch.nn.functional.normalize(n, dim=-3)
    return n


"""
Parameters for TinyNeRF training
"""

# Number of functions used in the positional encoding (Be sure to update the
# model if this number changes).
num_encoding_functions = 6
# Specify encoding function.
encode = lambda x: positional_encoding(x, num_encoding_functions=num_encoding_functions)
# Number of depth samples along each ray.
depth_samples_per_ray = 128

# Chunksize (Note: this isn't batchsize in the conventional sense. This only
# specifies the number of rays to be queried in one go. Backprop still happens
# only after all rays from the current "bundle" are queried and rendered).
chunksize = 16384  # Use chunksize of about 4096 to fit in ~1.4 GB of GPU memory.

# Optimizer parameters
lr = 1e-3
num_iters = 200000
a_p = 0.001
a_sch = 10000
a_disp = 0.0005

# Misc parameters
display_every = 2000  # Number of iters after which stats are displayed

"""
Model
"""
model = VeryTinyNerfModel(num_encoding_functions=num_encoding_functions)
model.to(device)
one_model = one_shot_nerf(num_samples=depth_samples_per_ray)
one_model.to(device)

"""
Optimizer
"""
optimizer = torch.optim.Adam(list(model.parameters()) +
                             list(one_model.parameters()), lr=lr)

"""
Train-Eval-Repeat!
"""

# Seed RNG, for repeatability
seed = 9458
torch.manual_seed(seed)
np.random.seed(seed)

# Lists to log metrics etc.
psnrs = []
iternums = []
train_losses = []

for i in range(num_iters):

    # Randomly pick an image as the target.
    target_img_idx = np.random.randint(images.shape[0])
    target_img = images[target_img_idx].to(device)
    target_tform_cam2world = tform_cam2world[target_img_idx].to(device)

    # Run one iteration of TinyNeRF and get the rendered RGB image.
    rgb_predicted, rgb_nerf, rgb_predicted2, depth_map, depth_map_nerf, depth_map2 = run_one_iter_of_tinynerf(height, width, focal_length,
                                                        target_tform_cam2world, near_thresh,
                                                        far_thresh, depth_samples_per_ray,
                                                        encode, get_minibatches)

    # Compute mean-squared error between the predicted and target images. Backprop!
    loss = torch.nn.functional.mse_loss(rgb_predicted, target_img) + \
           torch.nn.functional.mse_loss(rgb_nerf, target_img) #+ \
           # torch.nn.functional.mse_loss(rgb_predicted2, target_img)

    if a_disp > 0 and i >= 1:
        # B = 1
        # H, W, C = target_img.shape
        #
        # # Prepare identity grid
        # i_tetha = torch.zeros(B, 2, 3).cuda()
        # i_tetha[:, 0, 0] = 1
        # i_tetha[:, 1, 1] = 1
        # a_grid = torch.nn.functional.affine_grid(i_tetha, [B, 3, H, W], align_corners=True)
        # in_grid = torch.zeros(B, 2, H, W).type(a_grid.type())
        # in_grid[:, 0, :, :] = a_grid[:, :, :, 0]
        # in_grid[:, 1, :, :] = a_grid[:, :, :, 1]
        #
        # normals = disp_to_coords_n(depth_map[None, None], in_grid, H, W)
        # normals = coords_to_normals(normals)
        # nef_normals = disp_to_coords_n(depth_map_nerf[None, None], in_grid, H, W)
        # nef_normals = coords_to_normals(nef_normals)
        #
        # loss += 0.05 * torch.mean(torch.abs(nef_normals - normals))
        # mask = (torch.abs(depth_map - depth_map_nerf).detach() < 1).type_as(depth_map)
        loss += a_disp * torch.mean(torch.abs(depth_map - depth_map_nerf))
        # loss += a_disp * torch.mean(torch.abs(depth_map2 - depth_map_nerf))
        # loss += a_disp * torch.mean(torch.abs(depth_map2.detach() - depth_map))

    if a_p > 0 and i >= a_sch:
        # reshape for vgg (B, C, H, W)
        rgb_predicted_ = torch.transpose(rgb_predicted, 0, 2).unsqueeze(0)
        target_img_ = torch.transpose(target_img, 0, 2).unsqueeze(0)
        vgg_target = vgg(target_img_)
        loss = loss + a_p * perceptual_loss(vgg(rgb_predicted_), vgg_target)
        # rgb_predicted_ = torch.transpose(rgb_predicted2, 0, 2).unsqueeze(0)
        # loss = loss + a_p * perceptual_loss(vgg(rgb_predicted_), vgg_target)

    loss.backward()
    optimizer.step()
    optimizer.zero_grad()

    # Display images/plots/stats
    if i % display_every == 0:
        iternums.append(i)

        # Render training view
        train_losses.append(loss.detach().item())
        log_stuff(rgb_predicted, rgb_nerf, rgb_predicted2, depth_map, depth_map_nerf, depth_map2,
                  i, iternums, train_losses=train_losses)

        # Render the held-out view
        rgb_predicted, rgb_nerf, rgb_predicted2, depth_map, depth_map_nerf, depth_map2 = run_one_iter_of_tinynerf(height, width, focal_length,
                                                            testpose, near_thresh,
                                                            far_thresh, depth_samples_per_ray,
                                                            encode, get_minibatches)
        loss = torch.nn.functional.mse_loss(rgb_predicted, testimg)
        print("Loss:", loss.item())
        psnr = -10. * torch.log10(loss)

        psnrs.append(psnr.item())
        log_stuff(rgb_predicted, rgb_nerf, rgb_predicted2, depth_map, depth_map_nerf, depth_map2,
                  i, iternums, psnrs)

print('Done!')